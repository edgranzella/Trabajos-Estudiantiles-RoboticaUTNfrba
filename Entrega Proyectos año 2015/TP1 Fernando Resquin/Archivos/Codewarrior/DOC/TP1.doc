=============================================================================
List of generated methods in project: TP1

THIS TEXT DESCRIPTION IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
=============================================================================

Module "TFR1"      (bean DSP_Func_TFR)
   - TFR1_tfr16SinPIx -The function calculates sine (pi * x).
   - TFR1_tfr16SinPIxLUT -The function generates one sine value and returns it.
   - TFR1_tfr16CosPIx -The function calculates cosine (pi * x).
   - TFR1_tfr16SinPIxLUTCreate -The function allocates the structure of type tfr16_tSinPIxLUT. This method is enabled only if 
                Memory management property is enabled.
   - TFR1_tfr16SinPIxLUTDestroy -The function frees the tfr16_tSinPIxLUT data structures(s) previously allocated by 
                tfr16SinPIxLUTCreate. This method is enabled only if Memory management property is enabled.
   - TFR1_tfr16SinPIxLUTInit -The function initializes the tfr16_tSinPIxLUT data structure used by all tfr16SinPIxLUT functions.
                The tfr16_tSinPIxLUT data structure pointed to by pSWG must have been allocated prior to calling 
                tfr16SinPIxLUTInit.
   - TFR1_tfr16CosPIxLUT -The function generates one cosine value and returns it.
   - TFR1_tfr16CosPIxLUTCreate -The function allocates the structure of type tfr16_tCosPIxLUT. This method is enabled only if 
                Memory management property is enabled.
   - TFR1_tfr16CosPIxLUTDestroy -The function frees the tfr16_tCosPIxLUT data structures(s) previously allocated by 
                tfr16CosPIxLUTCreate. This method is enabled only if Memory management property is enabled.
   - TFR1_tfr16CosPIxLUTInit -The function initializes the tfr16_tCosPIxLUT data structure used by all tfr16CosPIxLUT functions.
                The tfr16_tCosPIxLUT data structure pointed to by pSWG must have been allocated prior to calling 
                tfr16CosPIxLUTInit.
   - TFR1_tfr16AsinOverPI -The function calculates the Arcsin function of the fractional input value x, and divides that result 
                by pi; i.e., (Arcsin x) / pi.
   - TFR1_tfr16AcosOverPI -The function calculates the Arccos function of the fractional input value x, and divides that result 
                by pi; i.e., (Arccos x) / pi.
   - TFR1_tfr16AtanOverPI -The function calculates the Arctan function of the fractional input value x, and divides that result 
                by pi; i.e., (Arctan x) / pi.
   - TFR1_tfr16Atan2OverPI -The function calculates the Arctan (y / x), and divides that result by pi; i.e., (Arctan (y / x)) / 
                pi
   - TFR1_tfr16SineWaveGenIDTL -The function generates Nsamples and stores them in pValues.
   - TFR1_tfr16SineWaveGenIDTLDestroy -The function frees the tfr16_tSineWaveGenIDTL data structures(s) previously allocated by 
                tfr16SineWaveGenIDTLCreate. This method is enabled only if Memory management property is enabled.
   - TFR1_tfr16SineWaveGenRDTL -The function generates Nsamples and stores them in pValues.
   - TFR1_tfr16SineWaveGenRDTLDestroy -The function frees the tfr16_tSineWaveGenRDTL data structures(s) previously allocated by 
                tfr16SineWaveGenRDTLCreate. This method is enabled only if Memory management property is enabled.
   - TFR1_tfr16SineWaveGenRDITL -The function generates Nsamples and stores them in pValues.
   - TFR1_tfr16SineWaveGenRDITLDestroy -The function frees the tfr16_tSineWaveGenRDITL data structures(s) previously allocated 
                by tfr16SineWaveGenRDITLCreate. This method is enabled only if Memory management property is enabled.
   - TFR1_tfr16SineWaveGenRDITLQ -The function generates Nsamples and stores them in pValues.
   - TFR1_tfr16SineWaveGenRDITLQDestroy -The function frees the tfr16_tSineWaveGenRDITLQ data structures(s) previously 
                allocated by tfr16SineWaveGenRDITLQCreate. This method is enabled only if Memory management property is enabled.
   - TFR1_tfr16SineWaveGenPAM -The function generates Nsamples and stores them in pValues.
   - TFR1_tfr16SineWaveGenPAMDestroy -The function frees the tfr16_tSineWaveGenPAM data structures(s) previously allocated by 
                tfr16SineWaveGenPAMCreate. This method is enabled only if Memory management property is enabled.
   - TFR1_tfr16SineWaveGenDOM -The function generates Nsamples and stores them in pValues.
   - TFR1_tfr16SineWaveGenDOMDestroy -The function frees the tfr16_tSineWaveGenPAM data structures(s) previously allocated by 
                tfr16SineWaveGenPAMCreate. This method is enabled only if Memory management property is enabled.
   - TFR1_tfr16SineWaveGenIDTLCreate -The function allocates the structure of type tfr16_tSineWaveGenIDTL. This method is 
                enabled only if Memory management property is enabled.
   - TFR1_tfr16SineWaveGenIDTLInit -The function initializes the tfr16_tSineWaveGenIDTL data structure used by all 
                tfr16SineWaveGenIDTL functions. The tfr16_tSineWaveGenIDTL data structure pointed to by pSWG must have been 
                allocated prior to calling tfr16SineWaveGenIDTLInit. This method is enabled only if Memory management property 
                is enabled.
   - TFR1_tfr16SineWaveGenRDTLCreate -The function allocates the structure of type tfr16_tSineWaveGenRDTL. This method is 
                enabled only if Memory management property is enabled.
   - TFR1_tfr16SineWaveGenRDTLInit -The function initializes the tfr16_tSineWaveGenRDTL data structure used by all 
                tfr16SineWaveGenRDTL functions. The tfr16_tSineWaveGenRDTL data structure pointed to by pSWG must have been 
                allocated prior to calling tfr16SineWaveGenRDTLInit.
   - TFR1_tfr16SineWaveGenRDITLCreate -The function allocates the structure of type tfr16_tSineWaveGenRDITL. This method is 
                enabled only if Memory management property is enabled.
   - TFR1_tfr16SineWaveGenRDITLInit -The function initializes the tfr16_tSineWaveGenRDITL data structure used by all 
                tfr16SineWaveGenRDITL functions. The tfr16_tSineWaveGenRDITL data structure pointed to by pSWG must have been 
                allocated prior to calling tfr16SineWaveGenRDITLInit.
   - TFR1_tfr16SineWaveGenRDITLQCreate -The function allocates the structure of type tfr16_tSineWaveGenRDITLQ. This method is 
                enabled only if Memory management property is enabled.
   - TFR1_tfr16SineWaveGenRDITLQInit -The function initializes the tfr16_tSineWaveGenRDITLQ data structure used by all 
                tfr16SineWaveGenRDITLQ functions. The tfr16_tSineWaveGenRDITLQ data structure pointed to by pSWG must have been 
                allocated prior to calling tfr16SineWaveGenRDITLQInit.
   - TFR1_tfr16SineWaveGenPAMCreate -The function allocates the structure of type tfr16_SineWaveGenPAM. This method is enabled 
                only if Memory management property is enabled.
   - TFR1_tfr16SineWaveGenPAMInit -The function initializes the tfr16_tSineWaveGenPAM data structure used by all 
                tfr16SineWaveGenPAM functions. The tfr16_tSineWaveGenPAM data structure pointed to by pSWG must have been 
                allocated prior to calling tfr16SineWaveGenPAMInit.
   - TFR1_tfr16SineWaveGenDOMCreate -The function allocates the structure of type tfr16_tSineWaveGenPAM. This method is enabled 
                only if Memory management property is enabled.
   - TFR1_tfr16SineWaveGenDOMInit -The function initializes the tfr16_tSineWaveGenPAM data structure used by all 
                tfr16SineWaveGenDOM functions. The tfr16_tSineWaveGenPAM data structure pointed to by pSWG must have been 
                allocated prior to calling tfr16SineWaveGenDOMInit.
   - TFR1_tfr16WaveGenRDITLQ -The function generates one sample and returns it.
   - TFR1_tfr16WaveGenRDITLQCreate -The function allocates the structure of type tfr16_tWaveGenRDITLQ. This method is enabled 
                only if Memory management property is enabled.
   - TFR1_tfr16WaveGenRDITLQDestroy -The function frees the tfr16_tWaveGenRDITLQ data structures(s) previously allocated by 
                tfr16WaveGenRDITLQCreate. This method is enabled only if Memory management property is enabled.
   - TFR1_tfr16WaveGenRDITLQInit -The function initializes the tfr16_tWaveGenRDITLQ data structure used by all 
                tfr16WaveGenRDITLQ functions. The tfr16_tWaveGenRDITLQ data structure pointed to by pSWG must have been 
                allocated prior to calling tfr16WaveGenRDITLQInit.

Module "MFR1"      (bean DSP_Func_MFR)
   - MFR1_abs_s -The abs_s function calculates the 16-bit absolute value of the input value.
   - MFR1_add -The add function adds two 16-bit fractional numbers (x + y).
   - MFR1_div_s -The div_s function divides two fractional numbers (x / y); x and y must be positive and y must be greater than 
                or equal to x.
   - MFR1_mac_r -The mac function multiplies two 16-bit fractional input values (x * y) and adds the 32-bit result to w.
   - MFR1_msu_r -The msu function multiplies x by y and subtracts the 32-bit result from w.
   - MFR1_mult -This multiplication function multiply two fractional input values and return the result.
   - MFR1_mult_r -This multiplication function multiply two fractional input values and return the result. The function differs 
                from mult in that function rounds the result, whereas mult truncates the result to 16bits.
   - MFR1_negate -The negate function negates the fractional input value.
   - MFR1_round -The round function rounds the 32-bit fractional input value to 16 bits.
   - MFR1_shl -The shl function arithmetically shifts the input variable x left n positions, zero filling the least significant 
                bits of the result. If n is negative, the shl function arithmetically shifts x right by -n bits with sign 
                extension.
   - MFR1_shr -The shr function arithmetically shifts the input variable x right n positions, sign extending the result. If n 
                is negative, the shr function arithmetically shifts x left by -n bits, zero filling the least significant bits.
   - MFR1_shr_r -The shr_r function arithmetically shifts the input variable x right n positions, sign extending the result. If 
                n is negative, the shr_r function arithmetically shifts x left by -n bits, zero filling the least significant 
                bits. shr_r differs from shr in that shr_r rounds the 32-bit fractional result.
   - MFR1_sub -The sub function calculates (x - y).
   - MFR1_L_abs -The L_abs function calculates the 32-bit absolute value of the input value.
   - MFR1_L_add -The add function adds two 32-bit fractional numbers (x + y).
   - MFR1_div_ls -The div_ls function divides two fractional numbers (x / y); x and y must be positive and y must be greater 
                than or equal to x.
   - MFR1_L_mac -The mac function multiplies two 16-bit fractional input values (x * y) and adds the 32-bit result to w.
   - MFR1_L_msu -The msu function multiplies x by y and subtracts the 32-bit result from w.
   - MFR1_L_mult -This multiplication function multiply two fractional input values and return the result.
   - MFR1_L_mult_ls -This multiplication function multiply two fractional input values and return the result. The function 
                differs from mult in that function rounds the result, whereas mult truncates the result to 16bits.
   - MFR1_L_negate -The negate function negates the fractional input value.
   - MFR1_L_shl -The L_shl function arithmetically shifts the input variable x left n positions, zero filling the least 
                significant bits of the result. If n is negative, the shl function arithmetically shifts x right by -n bits 
                with sign extension.
   - MFR1_L_shr -The L_shr function arithmetically shifts the input variable x right n positions, sign extending the result. If 
                n is negative, the L_shr function arithmetically shifts x left by -n bits, zero filling the least significant 
                bits.
   - MFR1_L_shr_r -The L_shr_r function arithmetically shifts the input variable x right n positions, sign extending the result.
                If n is negative, the L_shr_r function arithmetically shifts x left by -n bits, zero filling the least 
                significant bits. L_shr_r differs from L_shr in that L_shr_r rounds the 32-bit fractional result.
   - MFR1_L_deposit_h -The L_deposit_h function places a 16-bit fractional value into the most significant 16-bits of the 
                32-bit fractional output value and zeroes the least significant 16 bits.
   - MFR1_L_deposit_l -The L_deposit_l function places a 16-bit fractional value into the least significant 16 bits of the 
                32-bit fractional output value and sign extends the most significant 16 bits.
   - MFR1_L_sub -The L_sub function calculates (x - y).
   - MFR1_extract_h -The extract_h function extracts the most significant 16 bits from the 32-bit fractional value.
   - MFR1_extract_l -The extract_l function extracts the least significant 16 bits from the 32-bit fractional value.
   - MFR1_norm_s -The norm function calculates the number of left shifts needed to normalize a fractional value.
   - MFR1_norm_l -The norm function calculates the number of left shifts needed to normalize a fractional value.
   - MFR1_mfr16Rand -The function calculates a pseudo-random number.
   - MFR1_mfr16SetRandSeed -The function sets the random number seed used by the pseudo-random number generation algorithm.
   - MFR1_mfr16Sqrt -The function calculates the square root of the fractional input data value.
   - MFR1_mfr32Sqrt -The function calculates the square root of the fractional input data value. This method cannot be disabled 
                if Use Assembler Files property is enabled.

Module "MEM1"      (bean DSP_MEM)
   - MEM1_memCallocEM -The memCallocEM function dynamically allocates an array with elements initialized to zero. The 
                memCallocEM function first tries to reallocate the memory from the external memory partition. For example see 
                <Typical Usage > page.
   - MEM1_memCallocIM -The memCallocIM function dynamically allocates an array with elements initialized to zero. The 
                memCallocIM function first tries to reallocate the memory from the internal memory partition. For example see 
                <Typical Usage > page.
   - MEM1_memFreeEM -The memFreeEM function deallocates a memory block in external memory that previously had been dynamically 
                allocated with the routine memMallocEM. For example see <Typical Usage > page.
   - MEM1_memFreeIM -The memFreeIM function deallocates a memory block in internal memory that previously had been dynamically 
                allocated with the routine memMallocIM. For example see <Typical Usage > page.
   - MEM1_memIsAligned -The memIsAligned function checks the address of a memory block to determine whether it is properly 
                aligned to use modulo addressing. For example see <Typical Usage > page.
   - MEM1_memIsEM -The memIsEM function checks the address of a memory block to determine whether it is in internal memory or 
                external memory. For example see <Typical Usage > page.
   - MEM1_memIsIM -The memIsIM function checks the address of a memory block to determine whether it is in internal memory or 
                external memory. For example see <Typical Usage > page.
   - MEM1_memMallocAlignedEM -The memMallocAlignedEM function allocates dynamic memory of the specified size from the memory 
                partitions and aligns the memory to use modulo addressing. The function memMallocAlignedEM first tries to 
                allocate the memory, properly aligned, from the external memory partition. However, if space is insufficient in 
                the external memory partition to satisfy the dynamic memory allocation, or if the memory request cannot be 
                properly aligned, memMallocAlignedEM then tries the allocation from the internal memory partition. If 
                memMallocAlignedEM cannot allocate an aligned buffer from either partition, it calls memMallocEM to try to 
                allocate a buffer of the correct size without the proper alignment. For example see <Typical Usage > page.
   - MEM1_memMallocAlignedIM -The memMallocAlignedIM function allocates dynamic memory of the specified size from the memory 
                partitions and aligns the memory properly to use modulo addressing. The function memMallocAlignedIM first tries 
                to allocate the memory, properly aligned, from the internal memory partition. However, if not enough space 
                exists in the internal memory partition to satisfy the dynamic memory allocation, or if the memory request 
                cannot be properly aligned, memMallocAlignedIM then tries the allocation from the external memory partition. If 
                memMallocAlignedIM cannot allocate an aligned buffer from either partition, it calls memMallocIM to try to 
                allocate a buffer of the correct size without the proper alignment. For example see <Typical Usage > page.
   - MEM1_memMallocEM -The memMallocEM function allocates dynamic memory of the specified size from the memory partitions. The 
                function memMallocEM first tries to allocate the memory from the external memory partition. However, if not 
                enough space exists in the external memory partition to satisfy the dynamic memory allocation, memMallocEM then 
                tries the allocation from the internal memory partition. For example see <Typical Usage > page.
   - MEM1_memMallocIM -The memMallocIM function allocates dynamic memory of the specified size from the memory partitions. The 
                function memMallocIM first tries to allocate the memory from the internal memory partition. However, if not 
                enough space exists in the internal memory partition to satisfy the dynamic memory allocation, memMallocIM then 
                tries the allocation from the external memory partition. For example see <Typical Usage > page.
   - MEM1_memReallocEM -The memReallocEM function dynamically reallocates and resizes a memory buffer to the specified size 
                from the memory partitions. The function memReallocEM first tries to reallocate the memory from the external 
                memory partition. However, if not enough space exists in the external memory partition to satisfy the dynamic 
                memory allocation, memReallocEM then tries the allocation from the internal memory partition. For example see 
                <Typical Usage > page.
   - MEM1_memReallocIM -The memReallocIM function dynamically reallocates and resizes a memory buffer to the specified size 
                from the memory partitions. The function memReallocIM first tries to reallocate the memory from the internal 
                memory partition. However, if not enough space exists in the internal memory partition to satisfy the dynamic 
                memory allocation, memReallocIM then tries the allocation from the external memory partition For example see 
                <Typical Usage > page.
   - MEM1_memMemcpy -The memcpy routine copies characters between memory buffers For example see <Typical Usage > page.
   - MEM1_memMemset -The memset function sets user specified number of bytes in memory to a specific character For example see 
                <Typical Usage > page.
   - MEM1_memMemsetP -The memset function sets user specified number of bytes in 'P' memory to a specific character
   - MEM1_memCopyPtoX -The memCopyPtoX copies a block of data from the P (program) data memory to the X data memory. The 
                memCopyPtoX executes the specific instructions required to read data from program P data memory, as opposed to 
                X data. For example see <Typical Usage > page.
   - MEM1_memCopyXtoP -The memCopyXtoP copies a block of data from the X data memory to the P (program) data memory. The 
                memCopyXtoP executes the specific instructions required to write data to program P data memory, as opposed to X 
                data. For example see <Typical Usage > page.
   - MEM1_memCopyPtoP -The memCopyPtoP copies a block of data from the P (program) data memory to the P data memory. The 
                memCopyPtoP executes the specific instructions required to read data from program P data memory.
   - MEM1_memReadP16 -The function memReadP16 reads a 16-bit word from the program data (P data), address space. The memReadP16 
                executes the specific instructions to reference program P data, as opposed to X data. For example see <Typical 
                Usage > page.
   - MEM1_memReadP32 -The function memReadP32 reads a 32-bit word from the program data (P data) address space. The memReadP32 
                executes the specific instructions to reference program P data, as opposed to X data. For example see <Typical 
                Usage > page.
   - MEM1_memWriteP16 -The memWriteP16 function writes a 16-bit value into the program data, (P data), address space. The 
                memWriteP16 executes the specific instructions required to write to program (P) data, as opposed to X data. For 
                example see <Typical Usage > page.
   - MEM1_memWriteP32 -The memWriteP32 function writes a 32-bit value into the program data, (P data), address space. The 
                memWriteP32 executes specific instructions required to write to program P data, as opposed to X data. For 
                example see <Typical Usage > page.

Module "XFR1"      (bean DSP_Func_XFR)
   - XFR1_xfr16Add -The function totals two matrices, X and Y, to produce Z: Z = X + Y.
   - XFR1_xfr16Sub -The function subtracts the input matrix Y from the input matrix X, producing the output matrix Z; i.e., Z = 
                X - Y.
   - XFR1_xfr16Mult -The function multiplies the input matrix X by the input matrix Y to produce output matrix Z.
   - XFR1_xfr16Equal -The function determines whether two matrices are equal.
   - XFR1_xfr16Trans -The function transposes the input matrix X and produces the output matrix Z.
   - XFR1_xfr16Inv -The function calculates the inverse matrix Z of the square input matrix X.
   - XFR1_xfr16Det -The function calculates the determinant of the square input matrix X.

Module "AFR1"      (bean DSP_Func_AFR)
   - AFR1_afr16Abs -The function calculates the absolute value of each fractional element of the input array pointed to by pX; 
                i.e., pZ[i] = pX[i], 0 <= i < n. This method cannot be disabled if Use Assembler Files property is enabled.
   - AFR1_afr16Add -The function totals the corresponding elements of each input array; i.e., pZ[i] = pX[i] + pY[i], 0 <= i < n.
                This method cannot be disabled if Use Assembler Files property is enabled.
   - AFR1_afr16Div -The function divides the corresponding elements of each input array; i.e., pZ[i] = pX[i] / pY[i], 0 <= i < 
                n. In this equation, pX[i] and pY[i] must be positive, and pY[i] must be greater than or equal to pX[i]. This 
                method cannot be disabled if Use Assembler Files property is enabled.
   - AFR1_afr16Equal -The function compares the corresponding elements of each fractional array for equality, i.e., pX[i] == 
                pY[i], 0 <= i < n. This method cannot be disabled if Use Assembler Files property is enabled.
   - AFR1_afr16Mac_r -The function multiplies the corresponding elements of each X and Y input array and adds the result to the 
                corresponding element of the W input array; i.e., pZ[i] = (pX[i] * pY[i]) + pW[i], 0 <= i < n. This method 
                cannot be disabled if Use Assembler Files property is enabled.
   - AFR1_afr16Max -The function searches the input array for the maximum fractional value. This method cannot be disabled if 
                Use Assembler Files property is enabled.
   - AFR1_afr16Msu_r -The function multiplies the corresponding elements of each X and Y input array and subtracts the result 
                from the corresponding element of the W input array; i.e., pZ[i] = pW[i] - (pX[i] * pY[i]), 0 <= i < n. This 
                method cannot be disabled if Use Assembler Files property is enabled.
   - AFR1_afr16Min -The function searches the input array for the minimum fractional value. This method cannot be disabled if 
                Use Assembler Files property is enabled.
   - AFR1_afr16Mult -The function multiplies the corresponding elements of each input array; i.e., pZ[i] = pX[i] * pY[i], 0 <= 
                i < n. The mult_r function differs from mult in that mult_r rounds the result, but mult truncates the result. 
                This method cannot be disabled if Use Assembler Files property is enabled.
   - AFR1_afr16Mult_r -The function multiplies the corresponding elements of each input array; i.e., pZ[i] = pX[i] * pY[i], 0 
                <= i < n. The mult_r function differs from mult in that mult_r rounds the result, but mult truncates the result.
                This method cannot be disabled if Use Assembler Files property is enabled.
   - AFR1_afr16Negate -The function negates each fractional element of the input array pointed to by pX; i.e., pZ[i] = - pX[i], 
                0 <= i < n. This method cannot be disabled if Use Assembler Files property is enabled.
   - AFR1_afr16Rand -The function calculates n random 16-bit fractional numbers and stores them in the output array pointed to 
                by pZ; i.e., pZ[i] = rand(), 0 <= i < n. This method cannot be disabled if Use Assembler Files property is 
                enabled.
   - AFR1_afr16Sqrt -The function calculates the square root of each fractional element of the input array pointed to by pX; i.
                e., pZ[i] = sqrt(pX[i]), 0 <= i < n. This method cannot be disabled if Use Assembler Files property is enabled.
   - AFR1_afr16Sub -The function subtracts the corresponding elements of the pY input array from the pX input array; i.e., 
                pZ[i] = pX[i] - pY[i], 0 <= i < n. This method cannot be disabled if Use Assembler Files property is enabled.
   - AFR1_afr32Abs -The function calculates the absolute value of each fractional element of the input array pointed to by pX; 
                i.e., pZ[i] = pX[i], 0 <= i < n. This method cannot be disabled if Use Assembler Files property is enabled.
   - AFR1_afr32Add -The function totals the corresponding elements of each input array; i.e., pZ[i] = pX[i] + pY[i], 0 <= i < n.
                This method cannot be disabled if Use Assembler Files property is enabled.
   - AFR1_afr32Div -The function divides the corresponding elements of each input array; i.e., pZ[i] = pX[i] / pY[i], 0 <= i < 
                n. In this equation, pX[i] and pY[i] must be positive, and pY[i] must be greater than or equal to pX[i]. This 
                method cannot be disabled if Use Assembler Files property is enabled.
   - AFR1_afr32Equal -The function compares the corresponding elements of each fractional array for equality, i.e., pX[i] == 
                pY[i], 0 <= i < n. This method cannot be disabled if Use Assembler Files property is enabled.
   - AFR1_afr32Mac -The function multiplies the corresponding elements of each X and Y input array and adds the result to the 
                corresponding element of the W input array; i.e., pZ[i] = (pX[i] * pY[i]) + pW[i], 0 <= i < n. This method 
                cannot be disabled if Use Assembler Files property is enabled.
   - AFR1_afr32Mac_r -The function multiplies the corresponding elements of each X and Y input array and adds the result to the 
                corresponding element of the W input array; i.e., pZ[i] = (pX[i] * pY[i]) + pW[i], 0 <= i < n. This method 
                cannot be disabled if Use Assembler Files property is enabled.
   - AFR1_afr32Max -The function searches the input array for the maximum fractional value. This method cannot be disabled if 
                Use Assembler Files property is enabled.
   - AFR1_afr32Min -The function searches the input array for the minimum fractional value. This method cannot be disabled if 
                Use Assembler Files property is enabled.
   - AFR1_afr32Msu -The function multiplies the corresponding elements of each X and Y input array and subtracts the result 
                from the corresponding element of the W input array; i.e., pZ[i] = pW[i] - (pX[i] * pY[i]), 0 <= i < n. This 
                method cannot be disabled if Use Assembler Files property is enabled.
   - AFR1_afr32Msu_r -The function multiplies the corresponding elements of each X and Y input array and subtracts the result 
                from the corresponding element of the W input array; i.e., pZ[i] = pW[i] - (pX[i] * pY[i]), 0 <= i < n. This 
                method cannot be disabled if Use Assembler Files property is enabled.
   - AFR1_afr32Mult -The function multiplies the corresponding elements of each input array; i.e., pZ[i] = pX[i] * pY[i], 0 <= 
                i < n. The mult_r function differs from mult in that mult_r rounds the result, but mult truncates the result. 
                This method cannot be disabled if Use Assembler Files property is enabled.
   - AFR1_afr32Negate -The function negates each fractional element of the input array pointed to by pX; i.e., pZ[i] = - pX[i], 
                0 <= i < n. This method cannot be disabled if Use Assembler Files property is enabled.
   - AFR1_afr32Mult_ls -The function multiplies the corresponding elements of each input array; i.e., pZ[i] = pX[i] * pY[i], 0 
                <= i < n. The mult_r function differs from mult in that mult_r rounds the result, but mult truncates the result.
                This method cannot be disabled if Use Assembler Files property is enabled.
   - AFR1_afr32Round -The function converts each 32-bit fractional element of the input array pointed to by pX into a 16-bit 
                fractional value, rounding the least significant bit; i.e., pZ[i] = round(pX[i]), 0 <= i < n. This method 
                cannot be disabled if Use Assembler Files property is enabled.
   - AFR1_afr32Sqrt -The function calculates the square root of each fractional element of the input array pointed to by pX; i.
                e., pZ[i] = sqrt(pX[i]), 0 <= i < n. This method cannot be disabled if Use Assembler Files property is enabled.
   - AFR1_afr32Sub -The function subtracts the corresponding elements of the pY input array from the pX input array; i.e., 
                pZ[i] = pX[i] - pY[i], 0 <= i < n. This method cannot be disabled if Use Assembler Files property is enabled.

Module "VFR1"      (bean DSP_Func_VFR)
   - VFR1_vfr16Add -The function totals two vectors; i.e., Z = X + Y. The actual implementation adds each element of the two 
                input vectors, pZ[i] = pX[i] + pY[i], 0 <= i < n.
   - VFR1_vfr16DotProd -The function calculates the dot product of two input vectors.
   - VFR1_vfr16Equal -The function tests two vectors for equality; i.e., X == Y; the actual implementation tests each 
                corresponding element, pX[i] == pY[i], 0 <= i < n.
   - VFR1_vfr16Length -The function calculates the length, or amplitude, of the input vector.
   - VFR1_vfr16Mult -The function multiplies an input vector by a fractional constant; i.e., Z = cX. The actual calculation 
                multiplies the constant c by each of the elements of the vector, i.e., pZ[i] = c * pX[i], 0 <= i < n.
   - VFR1_vfr16Scale -The function multiplies an input vector by an unsigned integer constant; i.e., Z = kX. The actual 
                calculation multiplies the constant k by each of the elements of the vector; i.e., pZ[i] = k * pX[i], 0 <= i < 
                n.
   - VFR1_vfr16Sub -The function provides a vector subtraction operation; i.e., Z = X - Y; the actual calculation subtracts 
                each corresponding element, pZ[i] = pX[i] - pY[i], 0 <= i < n.

Module "Cpu"       (bean 56F8367)
   - Cpu_EnableInt -Enables all maskable interrupts
   - Cpu_DisableInt -Disables all maskable interrupts
   - Cpu_SetWaitMode -Sets low power mode - Wait mode.  For more information about the wait mode see this CPU documentation.  
                Release from wait mode: Reset or interrupt
   - Cpu_SetStopMode -Sets low power mode - Stop mode.  For more information about the stop mode see this CPU documentation.
   - Cpu_SetDataMode -Sets the Data memory map to use either internal & external resources or external resources only.

===================================================================================

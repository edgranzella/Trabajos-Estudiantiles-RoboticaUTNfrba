/** ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename  : XFR1.H
**     Project   : TP1
**     Processor : 56F8367
**     Component : DSP_Func_XFR
**     Version   : Component 01.014, Driver 01.06, CPU db: 2.87.058
**     Compiler  : Metrowerks DSP C Compiler
**     Date/Time : 30/07/2015, 19:47
**     Abstract  :
**          The Digital Signal Processing Function Library implements
**          functions for matrices of fractional types as library routines.
**          The matrix operations provide highly optimized loops
**          on the elements of each matrix in order to provide the best
**          performance. The function library provides such matrix functions
**          for the 16-bit, (short), fractional type. For portability,
**          we have defined the short 16-bit fractional type as Frac16.
**     Settings  :
**          Bean Name                      : XFR1
**          Use Assembler Files            : no
**          Array Library                  : AFR1
**     Contents  :
**         xfr16Add   - void XFR1_xfr16Add(Frac16 *pX, int rows, int cols, Frac16 *pY, Frac16 *pZ);
**         xfr16Sub   - void XFR1_xfr16Sub(Frac16 *pX, int rows, int cols, Frac16 *pY, Frac16 *pZ);
**         xfr16Mult  - void XFR1_xfr16Mult(Frac16 *pX, int xrows, int xcols, Frac16 *pY, int ycols,...
**         xfr16Equal - bool XFR1_xfr16Equal(Frac16 *pX, int rows, int cols, Frac16 *pY);
**         xfr16Trans - void XFR1_xfr16Trans(Frac16 *pX, int xrows, int xcols, Frac16 *pZ);
**         xfr16Inv   - Frac32 XFR1_xfr16Inv(Frac16 *pX, int rowscols, Frac16 *pZ);
**         xfr16Det   - Frac32 XFR1_xfr16Det(Frac16 *pX, int rowscols);
**
**     (c) Freescale Semiconductor
**     2004 All Rights Reserved
**
**     Copyright : 1997 - 2009 Freescale Semiconductor, Inc. All Rights Reserved.
**     
**     http      : www.freescale.com
**     mail      : support@freescale.com
** ###################################################################*/

#ifndef __XFR1
#define __XFR1

/* MODULE XFR1. */

/*Include shared modules, which are used for whole project*/
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
/* Include inherited beans */
#include "AFR1.h"
#include "port.h"
#include "dspfunc.h"

#include "Cpu.h"



#define xfr16Sub(pX, rows, cols, pY, pZ) afr16Sub(pX,pY,pZ,rows*cols)
#define XFR1_xfr16Sub(pX, rows, cols, pY, pZ) afr16Sub(pX,pY,pZ,rows*cols)
/*
** ===================================================================
**     Method      :  XFR1_xfr16Sub (component DSP_Func_XFR)
**
**     Description :
**         The function subtracts the input matrix Y from the input
**         matrix X, producing the output matrix Z; i.e., Z = X - Y.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * pX              - Pointer to the first input matrix X of
**                           fractional data values.
**         rows            - The number of rows of the input
**                           matrix X; this is also the number of
**                           rows of the input matrix Y.
**         cols            - The number of columns of the input
**                           matrix X; this is also the number of
**                           columns of the input matrix Y.
**       * pY              - Pointer to the second input matrix Y of
**                           fractional data values.
**       * pZ              - Pointer to the output matrix Z of
**                           fractional data values.
**     Returns     : Nothing
** ===================================================================
*/

#define xfr16Add(pX, rows, cols, pY, pZ) afr16Add(pX,pY,pZ,rows*cols)
#define XFR1_xfr16Add(pX, rows, cols, pY, pZ) afr16Add(pX,pY,pZ,rows*cols)
/*
** ===================================================================
**     Method      :  XFR1_xfr16Add (component DSP_Func_XFR)
**
**     Description :
**         The function totals two matrices, X and Y, to produce Z:
**         Z = X + Y.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * pX              - Pointer to an input matrix (X) of
**                           fractional data values.
**         rows            - The number of rows in the matrices X,
**                           Y, and Z.
**         cols            - The number of columns in the matrices
**                           X, Y, and Z.
**       * pY              - Pointer to an input matrix (Y) of
**                           fractional data values.
**       * pZ              - Pointer to an output matrix (Z) of
**                           fractional data values.
**     Returns     : Nothing
** ===================================================================
*/

#define XFR1_xfr16Mult(pX, xrows, xcols, pY, ycols, pZ) xfr16Mult(pX, xrows, xcols, pY, ycols, pZ)
EXPORT void xfr16Mult(Frac16 *pX,int xrows,int xcols,Frac16 *pY,int ycols,Frac16 *pZ);
/*
** ===================================================================
**     Method      :  XFR1_xfr16Mult (component DSP_Func_XFR)
**
**     Description :
**         The function multiplies the input matrix X by the input
**         matrix Y to produce output matrix Z.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * pX              - Pointer to the first input matrix X of
**                           fractional data values.
**         xrows           - The number of rows of the input
**                           matrix X.
**         xcols           - The number of columns of the input
**                           matrix X; this is also the number of
**                           rows of the input matrix Y.
**       * pY              - Pointer to the second input matrix Y of
**                           fractional data values.
**         ycols           - The number of columns of the input
**                           matrix Y.
**       * pZ              - Pointer to the output matrix Z of
**                           fractional data values.
**     Returns     : Nothing
** ===================================================================
*/

#define xfr16Equal(pX, rows, cols, pY) afr16Equal(pX,pY,rows*cols)
#define XFR1_xfr16Equal(pX, rows, cols, pY) afr16Equal(pX,pY,rows*cols)
/*
** ===================================================================
**     Method      :  XFR1_xfr16Equal (component DSP_Func_XFR)
**
**     Description :
**         The function determines whether two matrices are equal.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * pX              - Pointer to the first input matrix X of
**                           fractional data values.
**         rows            - The number of rows of the input
**                           matrices X and Y.
**         cols            - The number of columns of the input
**                           matrices X and Y.
**       * pY              - Pointer to the second input matrix Y of
**                           fractional data values.
**     Returns     :
**         ---             - The function returns true if all
**                           corresponding elements of the two input
**                           matrices are equal. If any element of X
**                           differs in value from the corresponding
**                           element of Y, equal will return false.
** ===================================================================
*/

#define XFR1_xfr16Trans(pX, xrows, xcols, pZ) xfr16Trans(pX, xrows, xcols, pZ)
EXPORT void xfr16Trans(Frac16 *pX,int xrows,int xcols,Frac16 *pZ);
/*
** ===================================================================
**     Method      :  XFR1_xfr16Trans (component DSP_Func_XFR)
**
**     Description :
**         The function transposes the input matrix X and produces
**         the output matrix Z.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * pX              - Pointer to the input matrix X of
**                           fractional data values.
**         xrows           - The number of rows of the input
**                           matrix X; this is also the number of
**                           columns of the output matrix Z.
**         xcols           - The number of columns of the input
**                           matrix Y; this is also the number of
**                           rows of the output matrix Z.
**       * pZ              - Pointer to the output matrix Z of
**                           fractional data values.
**     Returns     : Nothing
** ===================================================================
*/

#define XFR1_xfr16Inv(pX, rowscols, pZ) xfr16Inv(pX, rowscols, pZ)
EXPORT Frac32 xfr16Inv(Frac16 *pX,int rowscols,Frac16 *pZ);
/*
** ===================================================================
**     Method      :  XFR1_xfr16Inv (component DSP_Func_XFR)
**
**     Description :
**         The function calculates the inverse matrix Z of the
**         square input matrix X.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * pX              - Pointer to a square input matrix X of
**                           fractional data values.
**         rowscols        - The number of rows and
**                           columns of the square input matrix X.
**       * pZ              - Pointer to a square output matrix Z of
**                           fractional data values.
**     Returns     :
**         ---             - The function stores the inverse matrix
**                           in the matrix pointed to by pZ. The inv
**                           function returns the value of the
**                           determinant of the matrix X.
** ===================================================================
*/

#define XFR1_xfr16Det(pX, rowscols) xfr16Det(pX, rowscols)
EXPORT Frac32 xfr16Det(Frac16 *pX,int rowscols);
/*
** ===================================================================
**     Method      :  XFR1_xfr16Det (component DSP_Func_XFR)
**
**     Description :
**         The function calculates the determinant of the square
**         input matrix X.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * pX              - Pointer to the square input matrix of
**                           fractional data values.
**         rowscols        - The number of rows of the
**                           square input matrix; this is also the
**                           number of columns of the square input
**                           matrix.
**     Returns     :
**         ---             - The function returns the results of the
**                           determinant calculation as the return
**                           value for the function.
** ===================================================================
*/

/* END XFR1. */

#endif /* ifndef __XFR1 */
/*
** ###################################################################
**
**     This file was created by Processor Expert 3.00 [04.35]
**     for the Freescale 56800 series of microcontrollers.
**
** ###################################################################
*/

/** ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename  : Inhr1.H
**     Project   : SenCos
**     Processor : 56F8367
**     Component : FreeCntr
**     Version   : Component 01.112, Driver 02.04, CPU db: 2.87.058
**     Compiler  : Metrowerks DSP C Compiler
**     Date/Time : 26/04/2010, 12:35 a.m.
**     Abstract  :
**         This device "FreeCntr" implements a free running counter for
**         time measurement.
**     Settings  :
**         Timer name                  : TMRC01 (32-bit)
**         Counter shared              : No
**
**         High speed mode
**             Prescaler               : divide-by-1
**             Clock                   : 60000000 Hz
**           Period
**             Xtal ticks              : 572662306
**             microseconds            : 71582788
**             milliseconds            : 71583
**             seconds                 : 72
**             seconds (real)          : 71.582788266667
**           Frequency of counting (Bus clock / prescaler)
**             Hz                      : 60000000
**
**         Initialization:
**              Timer                  : Enabled
**
**         Timer registers
**              Counter                : TMRC1_CNTR [61653]
**              Mode                   : TMRC1_CTRL [61654]
**              Run                    : TMRC1_CTRL [61654]
**              Prescaler              : TMRC1_CTRL [61654]
**
**         User handling procedure     : not specified
**     Contents  :
**         Enable          - byte Inhr1_Enable(void);
**         Disable         - byte Inhr1_Disable(void);
**         Reset           - byte Inhr1_Reset(void);
**         GetCounterValue - byte Inhr1_GetCounterValue(Inhr1_TTimerValue *Value);
**
**     Copyright : 1997 - 2009 Freescale Semiconductor, Inc. All Rights Reserved.
**     
**     http      : www.freescale.com
**     mail      : support@freescale.com
** ###################################################################*/

#ifndef __Inhr1
#define __Inhr1

/* MODULE Inhr1. */

/*Include shared modules, which are used for whole project*/
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
#include "Cpu.h"

#ifndef __BWUserType_Inhr1_TTimerValue
#define __BWUserType_Inhr1_TTimerValue
  typedef dword Inhr1_TTimerValue;     /* Counter or compare value, width depend on timer width, 8, 16, 32 or 64 bits. */
#endif

#define Inhr1_PRESCALER_VALUE 1UL      /* Initial prescaler value of the timer. It is available only if the bean is enabled in high speed mode. */
#define Inhr1_PRESCALER_VALUE_HIGH 1UL /* Prescaler value of the timer in high speed mode. It is available only if the bean is enabled in high speed mode. */
#define Inhr1_COUNTER_INPUT_CLOCK_HIGH 60000000UL /* Counter input clock value in high speed mode [Hz] (integer number). It is available only if the bean is enabled in high speed mode. */
#define Inhr1_COUNTER_INPUT_CLOCK 60000000UL /* Initial counter input clock value [Hz] (integer number). It is available only if the bean is enabled in high speed mode. */
#define Inhr1_UP_COUNTER   1           /* The timer counts upwards */
/* Deprecated constants */
#define Inhr1_FChigh       60000000UL  /* Frequency of counting in high speed CPU mode */

byte Inhr1_Enable(void);
/*
** ===================================================================
**     Method      :  Inhr1_Enable (component FreeCntr)
**
**     Description :
**         This method enables the component, i.e. timer is enabled and
**         the internal clocks are counted. The method usually also
**         reset the counter (if it is supported by HW). 
**         The method is not available if the counter is shared.
**     Parameters  : None
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
** ===================================================================
*/

byte Inhr1_Disable(void);
/*
** ===================================================================
**     Method      :  Inhr1_Disable (component FreeCntr)
**
**     Description :
**         This method disables the component, i.e. timer is disabled
**         and the internal clocks are stopped. Last counter value is
**         usually preserved in the counter (if it is supported by HW).
**         The method is not available if the counter is shared.
**     Parameters  : None
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
** ===================================================================
*/

byte Inhr1_Reset(void);
/*
** ===================================================================
**     Method      :  Inhr1_Reset (component FreeCntr)
**
**     Description :
**         This method resets the timer-counter (sets to zero for
**         up-counting HW or to appropriate value for down-counting HW).
**         The method is available only if the counter register can be
**         set by software and the counter is not shared.
**     Parameters  : None
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
** ===================================================================
*/

byte Inhr1_GetCounterValue(Inhr1_TTimerValue *Value);
/*
** ===================================================================
**     Method      :  Inhr1_GetCounterValue (component FreeCntr)
**
**     Description :
**         This method returns a content of counter.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * Value           - A pointer to the returned 32-bit value.
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
** ===================================================================
*/

void Inhr1_Init(void);
/*
** ===================================================================
**     Method      :  Inhr1_Init (component FreeCntr)
**
**     Description :
**         Initializes the associated peripheral(s) and the beans 
**         internal variables. The method is called automatically as a 
**         part of the application initialization code.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

/* END Inhr1. */

#endif /* ifndef __Inhr1 */
/*
** ###################################################################
**
**     This file was created by Processor Expert 3.00 [04.35]
**     for the Freescale 56800 series of microcontrollers.
**
** ###################################################################
*/

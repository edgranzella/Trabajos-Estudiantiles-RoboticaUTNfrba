=============================================================================
List of generated methods in project: SenCos

THIS TEXT DESCRIPTION IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
=============================================================================

Module "DFR1"      (bean DSP_Func_DFR)
   - DFR1_dfr16FIR -The method computes a Finite Impulse Response, (FIR), filter for a vector of fractional data values.   
                Prior to any call to fir, the FIR filter data structure referred to by the first parameter pFIR must be 
                allocated and initialized. This allocation and initialization can be done either statically by declaring a 
                dfr16_tFirStruct data structure and then initializing it with a call to dfr16FIRInit, or dynamically by calling 
                dfr16FIRCreate.
   - DFR1_dfr16FIRCreate -The method performs memory allocation and initialization for the fir filter function. This method is 
                enabled only if Memory management property is enabled.
   - DFR1_dfr16FIRHistory -The method reinitializes the Finite Impulse Response, (FIR), filter history buffer data values. 
                Prior to any call to firHistory, the FIR filter must be initialized via a call to firCreate. The firHistory 
                function uses the private data structure established by firCreate to establish the past history of data 
                elements required by the FIR filter computation. The argument pX must point to n fractional data elements, 
                where n is the number of coefficients used to establish the FIR filter in the call to firCreate.
   - DFR1_dfr16FIRDestroy -The method deallocates the data structure(s) initially allocated by firCreate. This method is 
                enabled only if Memory management property is enabled.
   - DFR1_dfr16FIRInit -The method initializes the fir filter function from a previously allocated dfr16_tFirStruct data 
                structure. Typically, this dfr16_tFirStruct data structure is allocated statically by the caller prior to the 
                firInit call. However, firCreate also uses firInit to initialize the dfr16_tFirStruct that it dynamically 
                allocates. This method cannot be disabled if Memory management property is enabled.
   - DFR1_dfr16FIRs -The method computes a Finite Impulse Response (FIR) filter for a single fractional data value.   Prior to 
                any call to fir, the FIR filter data structure referred to by the first parameter pFIR must be allocated and 
                initialized. This allocation and initialization can be done either statically by declaring a dfr16_tFirStruct 
                data structure and then initializing it with a call to dfr16FIRInit, or dynamically by calling dfr16FIRCreate.
   - DFR1_dfr16FIRInt -The method computes an interpolating Finite Impulse Response, (FIR), filter for a vector of fractional 
                data values.   Prior to any call to firint, the FIR filter data structure referred to by the first parameter 
                pFIRINT must be allocated and initialized. This allocation and initialization can be done either statically by 
                declaring a dfr16_tFirIntStruct data structure and then initializing it with a call to dfr16FIRIntInit, or 
                dynamically by calling dfr16FIRIntCreate.
   - DFR1_dfr16FIRIntCreate -The method performs the initialization for the firint filter function. The firintCreate function 
                allocates and initializes a data structure, dfr16_tFirIntStruct, which is used by firint to preserve the 
                filter’s state between calls. The data structure preserves the pC pointer to the vector of interpolating FIR 
                filter coefficients. The function firintCreate also allocates a buffer to save the past history of n data 
                elements required by the interpolating FIR filter computation; a pointer to this buffer is stored in the data 
                structure returned by firint. So that firint can achieve maximum efficiency using modulo addressing, 
                firintCreate allocates the history buffer from the system heap such that its address starts on a k-bit boundary,
                where k=log2(n). This method is enabled only if Memory management property is enabled.
   - DFR1_dfr16FIRIntDestroy -The method deallocates the data structure initially allocated by firintCreate. This method is 
                enabled only if Memory management property is enabled.
   - DFR1_dfr16FIRIntInit -The method initializes the firint filter function from a previously allocated dfr16_tFirIntStruct 
                data structure. Typically, this dfr16_tFirIntStruct data structure is allocated statically by the caller prior 
                to the firintInit call. However, firintCreate also uses firintInit to initialize the dfr16_tFirIntStruct that 
                it dynamically allocates. This method cannot be disabled if Memory management property is enabled.
   - DFR1_dfr16FIRDec -The method computes a decimating Finite Impulse Response, (FIR), filter for a vector of fractional data 
                values.   Prior to any call to firdec, the FIR filter data structure referred to by the first parameter pFIRDEC 
                must be allocated and initialized. This allocation and initialization can be done either statically by 
                declaring a dfr16_tFirDecStruct data structure and then initializing it with a call to dfr16FIRDecInit, or 
                dynamically by calling dfr16FIRDecCreate.
   - DFR1_dfr16FIRDecCreate -The method performs the initialization for the firdec filter function. The function firdecCreate 
                allocates and initializes a data structure, dfr16_tFirDecStruct, which is used by firdec to preserve the 
                filter’s state between calls. The data structure preserves the pC pointer to the vector of decimating FIR 
                filter coefficients. The firdecCreate function also allocates a buffer to save the past history of n data 
                elements required by the decimating FIR filter computation; a pointer to this buffer is stored in the data 
                structure pointed to by pFIRDEC. So firdec can achieve maximum efficiency using modulo addressing, firdecCreate 
                allocates the history buffer from the system heap such that its address starts on a k-bit boundary, where 
                k=log2(n). This method is enabled only if Memory management property is enabled.
   - DFR1_dfr16FIRDecDestroy -The method deallocates the data structure initially allocated by firdecCreate. This method is 
                enabled only if Memory management property is enabled.
   - DFR1_dfr16FIRDecInit -The method initializes the firdec filter function from a previously allocated dfr16_tFirDecStruct 
                data structure. Typically, this dfr16_tFirDecStruct data structure is allocated statically by the caller prior 
                to the firdecInit call. However, firdecCreate also uses firdecInit to initialize the dfr16_tFirDecStruct that 
                it dynamically allocates. This method cannot be disabled if Memory management property is enabled.
   - DFR1_dfr16IIR -The method computes an Infinite Impulse Response, (IIR), filter for a vector of fractional data values 
                using a cascade filter of biquad coefficients.   Prior to any call to iir, the IIR filter data structure 
                referred to by the first parameter pIIR must be allocated and initialized. This allocation and initialization 
                can be done either statically by declaring a dfr16_tIirStruct data structure and then initializing it with a 
                call to dfr16IIRInit, or dynamically by calling dfr16IIRCreate.
   - DFR1_dfr16IIRCreate -The method performs the initialization for the cascade iir filter function. The function iirCreate 
                allocates and initializes a data structure, which is used by iir to preserve the filter’s state between calls. 
                The data structure preserves the pC pointer to the linearized vector of n biquad IIR filter coefficients. The 
                iirCreate function also allocates a buffer to save the past history of two data elements (as shown in the 
                formula below using variable “w”) per biquad required by the cascade IIR filter computation; a pointer to this 
                buffer is stored in the private data structure. So that iir can achieve maximum efficiency using modulo 
                addressing, iirCreate allocates the history buffer from the system heap such that its address starts on a k-bit 
                boundary, where: k = log(2)(2 * n). This method is enabled only if Memory management property is enabled.
   - DFR1_dfr16IIRDestroy -The method deallocates the data structure(s) initially allocated by iirCreate. This method is 
                enabled only if Memory management property is enabled.
   - DFR1_dfr16IIRInit -The method performs the initialization for the cascade iir filter function and initializes the function 
                from a previously-allocated dfr16_tIirStruct data structure. Typically, the dfr16_tIirStruct data structure is 
                allocated statically by the caller prior to the iirInit call. The iirCreate function also uses iirInit to 
                initialize the dfr16_tIirStruct that it dynamically allocates. This method cannot be disabled if Memory 
                management property is enabled.
   - DFR1_dfr16AutoCorr -The method computes the first nz points of auto-correlation of a vector of fractional data values.
   - DFR1_dfr16Corr -The method computes the full length correlation of two vectors of fractional data values.
   - DFR1_dfr16CFFT -The method computes an in place, radix-2, complex, decimation-in-time, (DIT), forward Fast Fourier 
                Transform function for a vector of complex fractional data values.   Prior to any call to cfft, the CFFT data 
                structure referred to by the first parameter pCFFT must be allocated and initialized. This allocation and 
                initialization can be done either statically by declaring a dfr16_tCFFTStruct data structure and then 
                initializing it with a call to dfr16CFFTInit, or dynamically by calling dfr16CFFTCreate.
   - DFR1_dfr16CFFTCreate -The method performs the initialization for an in place, radix-2, complex, decimation-in-time (DIT), 
                forward Fast Fourier Transform (FFT) function, cfft, using complex fractional data values. The function 
                cfftCreate allocates and initializes a data structure, which is used by cfft to preserve the FFT function’s 
                state between calls. This method is enabled only if Memory management property is enabled.
   - DFR1_dfr16CFFTDestroy -The method deallocates the data structure(s) initially allocated by cfftCreate. This method is 
                enabled only if Memory management property is enabled.
   - DFR1_dfr16CFFTInit -The method performs the initialization for an in place, radix-2, complex, decimation-in-time (DIT), 
                forward Fast Fourier Transform (FFT) function, cfft, using complex fractional data values. Initializes the 
                function from a previously-allocated dfr16_tCFFTStruct data structure. Typically, the dfr16_tCFFTStruct data 
                structure is allocated statically by the caller prior to the cfftInit call. The cfftCreate function also uses 
                cfftInit to initialize the dfr16_tCFFTStruct that it dynamically allocates. This method cannot be disabled if 
                Memory management property is enabled.
   - DFR1_dfr16CIFFT -The method computes an in place, radix-2, complex, decimation-in-time (DIT), inverse Fast Fourier 
                Transform function for a vector of complex fractional data values.   Prior to any call to cifft, the CFFT data 
                structure referred to by the first parameter pCIFFT must be allocated and initialized. This allocation and 
                initialization can be done either statically by declaring a dfr16_tCFFTStruct data structure and then 
                initializing it with a call to dfr16CIFFTInit, or dynamically by calling dfr16CIFFTCreate.
   - DFR1_dfr16CIFFTCreate -The method performs the initialization for an in place, radix-2, complex, decimation-in-time (DIT), 
                inverse Fast Fourier Transform, (IFFT), using complex fractional data values. The function cifftCreate 
                allocates and initializes a data structure, which is used by cifft to preserve the IFFT function’s state 
                between calls. This method is enabled only if Memory management property is enabled.
   - DFR1_dfr16CIFFTDestroy -The method deallocates the data structure (s) initially allocated by cifftCreate. This method is 
                enabled only if Memory management property is enabled.
   - DFR1_dfr16CIFFTInit -The method performs the initialization for an in place, radix-2, complex, decimation-in-time (DIT), 
                inverse Fast Fourier Transform, (IFFT), using complex fractional data values. Initializes the function from a 
                previously-allocated dfr16_tCFFTStruct data structure. Typically, the dfr16_tCFFTStruct data structure is 
                allocated statically by the caller prior to the cifftInit call. The cifftCreate function also uses cifftInit to 
                initialize allocate the dfr16_tCFFTStruct dynamically. This method cannot be disabled if Memory management 
                property is enabled.
   - DFR1_dfr16RFFT -The method computes an in place, radix-2, real, decimation-in-time (DIT) forward Fast Fourier Transform 
                function for a vector of fractional data values.   Prior to any call to rfft, the RFFT data structure referred 
                to by the first parameter pRFFT must be allocated and initialized. This allocation and initialization can be 
                done either statically by declaring a dfr16_tRFFTStruct data structure and then initializing it with a call to 
                dfr16RFFTInit, or dynamically by calling dfr16RFFTCreate.
   - DFR1_dfr16RFFTCreate -The method performs the initialization for an in place, radix-2, real, decimation-in-time, (DIT), 
                forward Fast Fourier Transform, (FFT), function using fractional data values. The function rfftCreate allocates 
                and initializes a data structure, which is used by rfft to preserve the FFT function’s state between calls. 
                This method is enabled only if Memory management property is enabled.
   - DFR1_dfr16RFFTDestroy -The method deallocates the data structure(s) initially allocated by rfftCreate. This method is 
                enabled only if Memory management property is enabled.
   - DFR1_dfr16RFFTInit -The method performs the initialization for an in place, radix-2, real, decimation-in-time (DIT), 
                forward Fast Fourier Transform (FFT) function, rfft, using complex fractional data values. Initializes the 
                function from a previously allocated dfr16_tRFFTStruct data structure. Typically, the dfr16_tRFFTStruct data 
                structure is allocated statically by the caller prior to the rfftInit call. The rfftCreate function also uses 
                rfftInit to initialize the dfr16_tRFFTStruct that it dynamically allocates. This method cannot be disabled if 
                Memory management property is enabled.
   - DFR1_dfr16RIFFT -The method computes an in place, radix-2, decimation-in-time, (DIT), inverse Fast Fourier Transform 
                function for a structure of complex data values.   Prior to any call to rifft, the RFFT data structure referred 
                to by the first parameter pRIFFT must be allocated and initialized. This allocation and initialization can be 
                done either statically by declaring a dfr16_tRFFTStruct data structure and then initializing it with a call to 
                dfr16RIFFTInit, or dynamically by calling dfr16RIFFTCreate.
   - DFR1_dfr16RIFFTCreate -The method performs the initialization for an in place, inverse real Fast Fourier Transform, (IFFT),
                function using fractional data values. The function rifftCreate allocates and initializes a data structure, 
                which is used by rifft to preserve the FFT function’s state between calls. This method is enabled only if 
                Memory management property is enabled.
   - DFR1_dfr16RIFFTDestroy -The method deallocates the data structure(s) initially allocated by rifftCreate. This method is 
                enabled only if Memory management property is enabled.
   - DFR1_dfr16RIFFTInit -The method performs the initialization for an in place, radix-2, real, decimation-in-time (DIT), 
                forward Fast Fourier Transform (FFT) function, rifft, using complex fractional data values. Initializes the 
                function from a previously allocated dfr16_tRIFFTStruct data structure. Typically, the dfr16_tRIFFTStruct data 
                structure is allocated statically by the caller prior to the rifftInit call. The rifftCreate function also uses 
                rifftInit to initialize the dfr16_tRIFFTStruct that it dynamically allocates. This method cannot be disabled if 
                Memory management property is enabled.
   - DFR1_dfr16Cbitrev -The method bit-reverses the position of n complex data elements in the input vector, pointed to by pX. 
                The cbitrev function is used to convert normal, (linear), order complex vectors to bit-reversed complex vectors,
                and vice-versa, for use in Fast Fourier Transform functions.

Module "MEM1"      (bean DSP_MEM)
   - MEM1_memCallocEM -The memCallocEM function dynamically allocates an array with elements initialized to zero. The 
                memCallocEM function first tries to reallocate the memory from the external memory partition. For example see 
                <Typical Usage > page.
   - MEM1_memCallocIM -The memCallocIM function dynamically allocates an array with elements initialized to zero. The 
                memCallocIM function first tries to reallocate the memory from the internal memory partition. For example see 
                <Typical Usage > page.
   - MEM1_memFreeEM -The memFreeEM function deallocates a memory block in external memory that previously had been dynamically 
                allocated with the routine memMallocEM. For example see <Typical Usage > page.
   - MEM1_memFreeIM -The memFreeIM function deallocates a memory block in internal memory that previously had been dynamically 
                allocated with the routine memMallocIM. For example see <Typical Usage > page.
   - MEM1_memIsAligned -The memIsAligned function checks the address of a memory block to determine whether it is properly 
                aligned to use modulo addressing. For example see <Typical Usage > page.
   - MEM1_memIsEM -The memIsEM function checks the address of a memory block to determine whether it is in internal memory or 
                external memory. For example see <Typical Usage > page.
   - MEM1_memIsIM -The memIsIM function checks the address of a memory block to determine whether it is in internal memory or 
                external memory. For example see <Typical Usage > page.
   - MEM1_memMallocAlignedEM -The memMallocAlignedEM function allocates dynamic memory of the specified size from the memory 
                partitions and aligns the memory to use modulo addressing. The function memMallocAlignedEM first tries to 
                allocate the memory, properly aligned, from the external memory partition. However, if space is insufficient in 
                the external memory partition to satisfy the dynamic memory allocation, or if the memory request cannot be 
                properly aligned, memMallocAlignedEM then tries the allocation from the internal memory partition. If 
                memMallocAlignedEM cannot allocate an aligned buffer from either partition, it calls memMallocEM to try to 
                allocate a buffer of the correct size without the proper alignment. For example see <Typical Usage > page.
   - MEM1_memMallocAlignedIM -The memMallocAlignedIM function allocates dynamic memory of the specified size from the memory 
                partitions and aligns the memory properly to use modulo addressing. The function memMallocAlignedIM first tries 
                to allocate the memory, properly aligned, from the internal memory partition. However, if not enough space 
                exists in the internal memory partition to satisfy the dynamic memory allocation, or if the memory request 
                cannot be properly aligned, memMallocAlignedIM then tries the allocation from the external memory partition. If 
                memMallocAlignedIM cannot allocate an aligned buffer from either partition, it calls memMallocIM to try to 
                allocate a buffer of the correct size without the proper alignment. For example see <Typical Usage > page.
   - MEM1_memMallocEM -The memMallocEM function allocates dynamic memory of the specified size from the memory partitions. The 
                function memMallocEM first tries to allocate the memory from the external memory partition. However, if not 
                enough space exists in the external memory partition to satisfy the dynamic memory allocation, memMallocEM then 
                tries the allocation from the internal memory partition. For example see <Typical Usage > page.
   - MEM1_memMallocIM -The memMallocIM function allocates dynamic memory of the specified size from the memory partitions. The 
                function memMallocIM first tries to allocate the memory from the internal memory partition. However, if not 
                enough space exists in the internal memory partition to satisfy the dynamic memory allocation, memMallocIM then 
                tries the allocation from the external memory partition. For example see <Typical Usage > page.
   - MEM1_memReallocEM -The memReallocEM function dynamically reallocates and resizes a memory buffer to the specified size 
                from the memory partitions. The function memReallocEM first tries to reallocate the memory from the external 
                memory partition. However, if not enough space exists in the external memory partition to satisfy the dynamic 
                memory allocation, memReallocEM then tries the allocation from the internal memory partition. For example see 
                <Typical Usage > page.
   - MEM1_memReallocIM -The memReallocIM function dynamically reallocates and resizes a memory buffer to the specified size 
                from the memory partitions. The function memReallocIM first tries to reallocate the memory from the internal 
                memory partition. However, if not enough space exists in the internal memory partition to satisfy the dynamic 
                memory allocation, memReallocIM then tries the allocation from the external memory partition For example see 
                <Typical Usage > page.
   - MEM1_memMemcpy -The memcpy routine copies characters between memory buffers For example see <Typical Usage > page.
   - MEM1_memMemset -The memset function sets user specified number of bytes in memory to a specific character For example see 
                <Typical Usage > page.
   - MEM1_memMemsetP -The memset function sets user specified number of bytes in 'P' memory to a specific character
   - MEM1_memCopyPtoX -The memCopyPtoX copies a block of data from the P (program) data memory to the X data memory. The 
                memCopyPtoX executes the specific instructions required to read data from program P data memory, as opposed to 
                X data. For example see <Typical Usage > page.
   - MEM1_memCopyXtoP -The memCopyXtoP copies a block of data from the X data memory to the P (program) data memory. The 
                memCopyXtoP executes the specific instructions required to write data to program P data memory, as opposed to X 
                data. For example see <Typical Usage > page.
   - MEM1_memCopyPtoP -The memCopyPtoP copies a block of data from the P (program) data memory to the P data memory. The 
                memCopyPtoP executes the specific instructions required to read data from program P data memory.
   - MEM1_memReadP16 -The function memReadP16 reads a 16-bit word from the program data (P data), address space. The memReadP16 
                executes the specific instructions to reference program P data, as opposed to X data. For example see <Typical 
                Usage > page.
   - MEM1_memReadP32 -The function memReadP32 reads a 32-bit word from the program data (P data) address space. The memReadP32 
                executes the specific instructions to reference program P data, as opposed to X data. For example see <Typical 
                Usage > page.
   - MEM1_memWriteP16 -The memWriteP16 function writes a 16-bit value into the program data, (P data), address space. The 
                memWriteP16 executes the specific instructions required to write to program (P) data, as opposed to X data. For 
                example see <Typical Usage > page.
   - MEM1_memWriteP32 -The memWriteP32 function writes a 32-bit value into the program data, (P data), address space. The 
                memWriteP32 executes specific instructions required to write to program P data, as opposed to X data. For 
                example see <Typical Usage > page.

Module "TFR1"      (bean DSP_Func_TFR)
   - TFR1_tfr16SinPIx -The function calculates sine (pi * x).
   - TFR1_tfr16SinPIxLUT -The function generates one sine value and returns it.
   - TFR1_tfr16CosPIx -The function calculates cosine (pi * x).
   - TFR1_tfr16SinPIxLUTCreate -The function allocates the structure of type tfr16_tSinPIxLUT. This method is enabled only if 
                Memory management property is enabled.
   - TFR1_tfr16SinPIxLUTDestroy -The function frees the tfr16_tSinPIxLUT data structures(s) previously allocated by 
                tfr16SinPIxLUTCreate. This method is enabled only if Memory management property is enabled.
   - TFR1_tfr16SinPIxLUTInit -The function initializes the tfr16_tSinPIxLUT data structure used by all tfr16SinPIxLUT functions.
                The tfr16_tSinPIxLUT data structure pointed to by pSWG must have been allocated prior to calling 
                tfr16SinPIxLUTInit.
   - TFR1_tfr16CosPIxLUT -The function generates one cosine value and returns it.
   - TFR1_tfr16CosPIxLUTCreate -The function allocates the structure of type tfr16_tCosPIxLUT. This method is enabled only if 
                Memory management property is enabled.
   - TFR1_tfr16CosPIxLUTDestroy -The function frees the tfr16_tCosPIxLUT data structures(s) previously allocated by 
                tfr16CosPIxLUTCreate. This method is enabled only if Memory management property is enabled.
   - TFR1_tfr16CosPIxLUTInit -The function initializes the tfr16_tCosPIxLUT data structure used by all tfr16CosPIxLUT functions.
                The tfr16_tCosPIxLUT data structure pointed to by pSWG must have been allocated prior to calling 
                tfr16CosPIxLUTInit.
   - TFR1_tfr16AsinOverPI -The function calculates the Arcsin function of the fractional input value x, and divides that result 
                by pi; i.e., (Arcsin x) / pi.
   - TFR1_tfr16AcosOverPI -The function calculates the Arccos function of the fractional input value x, and divides that result 
                by pi; i.e., (Arccos x) / pi.
   - TFR1_tfr16AtanOverPI -The function calculates the Arctan function of the fractional input value x, and divides that result 
                by pi; i.e., (Arctan x) / pi.
   - TFR1_tfr16Atan2OverPI -The function calculates the Arctan (y / x), and divides that result by pi; i.e., (Arctan (y / x)) / 
                pi
   - TFR1_tfr16SineWaveGenIDTL -The function generates Nsamples and stores them in pValues.
   - TFR1_tfr16SineWaveGenIDTLDestroy -The function frees the tfr16_tSineWaveGenIDTL data structures(s) previously allocated by 
                tfr16SineWaveGenIDTLCreate. This method is enabled only if Memory management property is enabled.
   - TFR1_tfr16SineWaveGenRDTL -The function generates Nsamples and stores them in pValues.
   - TFR1_tfr16SineWaveGenRDTLDestroy -The function frees the tfr16_tSineWaveGenRDTL data structures(s) previously allocated by 
                tfr16SineWaveGenRDTLCreate. This method is enabled only if Memory management property is enabled.
   - TFR1_tfr16SineWaveGenRDITL -The function generates Nsamples and stores them in pValues.
   - TFR1_tfr16SineWaveGenRDITLDestroy -The function frees the tfr16_tSineWaveGenRDITL data structures(s) previously allocated 
                by tfr16SineWaveGenRDITLCreate. This method is enabled only if Memory management property is enabled.
   - TFR1_tfr16SineWaveGenRDITLQ -The function generates Nsamples and stores them in pValues.
   - TFR1_tfr16SineWaveGenRDITLQDestroy -The function frees the tfr16_tSineWaveGenRDITLQ data structures(s) previously 
                allocated by tfr16SineWaveGenRDITLQCreate. This method is enabled only if Memory management property is enabled.
   - TFR1_tfr16SineWaveGenPAM -The function generates Nsamples and stores them in pValues.
   - TFR1_tfr16SineWaveGenPAMDestroy -The function frees the tfr16_tSineWaveGenPAM data structures(s) previously allocated by 
                tfr16SineWaveGenPAMCreate. This method is enabled only if Memory management property is enabled.
   - TFR1_tfr16SineWaveGenDOM -The function generates Nsamples and stores them in pValues.
   - TFR1_tfr16SineWaveGenDOMDestroy -The function frees the tfr16_tSineWaveGenPAM data structures(s) previously allocated by 
                tfr16SineWaveGenPAMCreate. This method is enabled only if Memory management property is enabled.
   - TFR1_tfr16SineWaveGenIDTLCreate -The function allocates the structure of type tfr16_tSineWaveGenIDTL. This method is 
                enabled only if Memory management property is enabled.
   - TFR1_tfr16SineWaveGenIDTLInit -The function initializes the tfr16_tSineWaveGenIDTL data structure used by all 
                tfr16SineWaveGenIDTL functions. The tfr16_tSineWaveGenIDTL data structure pointed to by pSWG must have been 
                allocated prior to calling tfr16SineWaveGenIDTLInit. This method is enabled only if Memory management property 
                is enabled.
   - TFR1_tfr16SineWaveGenRDTLCreate -The function allocates the structure of type tfr16_tSineWaveGenRDTL. This method is 
                enabled only if Memory management property is enabled.
   - TFR1_tfr16SineWaveGenRDTLInit -The function initializes the tfr16_tSineWaveGenRDTL data structure used by all 
                tfr16SineWaveGenRDTL functions. The tfr16_tSineWaveGenRDTL data structure pointed to by pSWG must have been 
                allocated prior to calling tfr16SineWaveGenRDTLInit.
   - TFR1_tfr16SineWaveGenRDITLCreate -The function allocates the structure of type tfr16_tSineWaveGenRDITL. This method is 
                enabled only if Memory management property is enabled.
   - TFR1_tfr16SineWaveGenRDITLInit -The function initializes the tfr16_tSineWaveGenRDITL data structure used by all 
                tfr16SineWaveGenRDITL functions. The tfr16_tSineWaveGenRDITL data structure pointed to by pSWG must have been 
                allocated prior to calling tfr16SineWaveGenRDITLInit.
   - TFR1_tfr16SineWaveGenRDITLQCreate -The function allocates the structure of type tfr16_tSineWaveGenRDITLQ. This method is 
                enabled only if Memory management property is enabled.
   - TFR1_tfr16SineWaveGenRDITLQInit -The function initializes the tfr16_tSineWaveGenRDITLQ data structure used by all 
                tfr16SineWaveGenRDITLQ functions. The tfr16_tSineWaveGenRDITLQ data structure pointed to by pSWG must have been 
                allocated prior to calling tfr16SineWaveGenRDITLQInit.
   - TFR1_tfr16SineWaveGenPAMCreate -The function allocates the structure of type tfr16_SineWaveGenPAM. This method is enabled 
                only if Memory management property is enabled.
   - TFR1_tfr16SineWaveGenPAMInit -The function initializes the tfr16_tSineWaveGenPAM data structure used by all 
                tfr16SineWaveGenPAM functions. The tfr16_tSineWaveGenPAM data structure pointed to by pSWG must have been 
                allocated prior to calling tfr16SineWaveGenPAMInit.
   - TFR1_tfr16SineWaveGenDOMCreate -The function allocates the structure of type tfr16_tSineWaveGenPAM. This method is enabled 
                only if Memory management property is enabled.
   - TFR1_tfr16SineWaveGenDOMInit -The function initializes the tfr16_tSineWaveGenPAM data structure used by all 
                tfr16SineWaveGenDOM functions. The tfr16_tSineWaveGenPAM data structure pointed to by pSWG must have been 
                allocated prior to calling tfr16SineWaveGenDOMInit.
   - TFR1_tfr16WaveGenRDITLQ -The function generates one sample and returns it.
   - TFR1_tfr16WaveGenRDITLQCreate -The function allocates the structure of type tfr16_tWaveGenRDITLQ. This method is enabled 
                only if Memory management property is enabled.
   - TFR1_tfr16WaveGenRDITLQDestroy -The function frees the tfr16_tWaveGenRDITLQ data structures(s) previously allocated by 
                tfr16WaveGenRDITLQCreate. This method is enabled only if Memory management property is enabled.
   - TFR1_tfr16WaveGenRDITLQInit -The function initializes the tfr16_tWaveGenRDITLQ data structure used by all 
                tfr16WaveGenRDITLQ functions. The tfr16_tWaveGenRDITLQ data structure pointed to by pSWG must have been 
                allocated prior to calling tfr16WaveGenRDITLQInit.

Module "MFR1"      (bean DSP_Func_MFR)
   - MFR1_abs_s -The abs_s function calculates the 16-bit absolute value of the input value.
   - MFR1_add -The add function adds two 16-bit fractional numbers (x + y).
   - MFR1_div_s -The div_s function divides two fractional numbers (x / y); x and y must be positive and y must be greater than 
                or equal to x.
   - MFR1_mac_r -The mac function multiplies two 16-bit fractional input values (x * y) and adds the 32-bit result to w.
   - MFR1_msu_r -The msu function multiplies x by y and subtracts the 32-bit result from w.
   - MFR1_mult -This multiplication function multiply two fractional input values and return the result.
   - MFR1_mult_r -This multiplication function multiply two fractional input values and return the result. The function differs 
                from mult in that function rounds the result, whereas mult truncates the result to 16bits.
   - MFR1_negate -The negate function negates the fractional input value.
   - MFR1_round -The round function rounds the 32-bit fractional input value to 16 bits.
   - MFR1_shl -The shl function arithmetically shifts the input variable x left n positions, zero filling the least significant 
                bits of the result. If n is negative, the shl function arithmetically shifts x right by -n bits with sign 
                extension.
   - MFR1_shr -The shr function arithmetically shifts the input variable x right n positions, sign extending the result. If n 
                is negative, the shr function arithmetically shifts x left by -n bits, zero filling the least significant bits.
   - MFR1_shr_r -The shr_r function arithmetically shifts the input variable x right n positions, sign extending the result. If 
                n is negative, the shr_r function arithmetically shifts x left by -n bits, zero filling the least significant 
                bits. shr_r differs from shr in that shr_r rounds the 32-bit fractional result.
   - MFR1_sub -The sub function calculates (x - y).
   - MFR1_L_abs -The L_abs function calculates the 32-bit absolute value of the input value.
   - MFR1_L_add -The add function adds two 32-bit fractional numbers (x + y).
   - MFR1_div_ls -The div_ls function divides two fractional numbers (x / y); x and y must be positive and y must be greater 
                than or equal to x.
   - MFR1_L_mac -The mac function multiplies two 16-bit fractional input values (x * y) and adds the 32-bit result to w.
   - MFR1_L_msu -The msu function multiplies x by y and subtracts the 32-bit result from w.
   - MFR1_L_mult -This multiplication function multiply two fractional input values and return the result.
   - MFR1_L_mult_ls -This multiplication function multiply two fractional input values and return the result. The function 
                differs from mult in that function rounds the result, whereas mult truncates the result to 16bits.
   - MFR1_L_negate -The negate function negates the fractional input value.
   - MFR1_L_shl -The L_shl function arithmetically shifts the input variable x left n positions, zero filling the least 
                significant bits of the result. If n is negative, the shl function arithmetically shifts x right by -n bits 
                with sign extension.
   - MFR1_L_shr -The L_shr function arithmetically shifts the input variable x right n positions, sign extending the result. If 
                n is negative, the L_shr function arithmetically shifts x left by -n bits, zero filling the least significant 
                bits.
   - MFR1_L_shr_r -The L_shr_r function arithmetically shifts the input variable x right n positions, sign extending the result.
                If n is negative, the L_shr_r function arithmetically shifts x left by -n bits, zero filling the least 
                significant bits. L_shr_r differs from L_shr in that L_shr_r rounds the 32-bit fractional result.
   - MFR1_L_deposit_h -The L_deposit_h function places a 16-bit fractional value into the most significant 16-bits of the 
                32-bit fractional output value and zeroes the least significant 16 bits.
   - MFR1_L_deposit_l -The L_deposit_l function places a 16-bit fractional value into the least significant 16 bits of the 
                32-bit fractional output value and sign extends the most significant 16 bits.
   - MFR1_L_sub -The L_sub function calculates (x - y).
   - MFR1_extract_h -The extract_h function extracts the most significant 16 bits from the 32-bit fractional value.
   - MFR1_extract_l -The extract_l function extracts the least significant 16 bits from the 32-bit fractional value.
   - MFR1_norm_s -The norm function calculates the number of left shifts needed to normalize a fractional value.
   - MFR1_norm_l -The norm function calculates the number of left shifts needed to normalize a fractional value.
   - MFR1_mfr16Rand -The function calculates a pseudo-random number.
   - MFR1_mfr16SetRandSeed -The function sets the random number seed used by the pseudo-random number generation algorithm.
   - MFR1_mfr16Sqrt -The function calculates the square root of the fractional input data value.
   - MFR1_mfr32Sqrt -The function calculates the square root of the fractional input data value. This method cannot be disabled 
                if Use Assembler Files property is enabled.

Module "CCNT1"     (bean DSP_CycleCounter)
   - CCNT1_cycleCountCalibrate -The cycleCountCalibrate function determines how many system clock cycles are required to 
                execute the cycleCountStart() and cycleCountStop() functions. This value will be used by the cycleCountStop() 
                function in order to subtract out the cycles that are not part of the user’s code being measured.  Please note: 
                If your program is running in a 'FLASH' memory, call the cycleCountCalibrate function immediately before the 
                cycleCountStart function.
   - CCNT1_cycleCountReport -The cycleCountReport function calculates the mean, maximum, and minimum execution times, and 
                writes the results to the Console.
   - CCNT1_cycleCountStart -The cycleCountStart() function performs the initialization of the Quad Timers and enables counting 
                of system clock cycles.
   - CCNT1_cycleCountStop -The cycleCountStop() function disables the Quad Timers and returns the number of system clock cycles 
                counted by Quad Timers. Note that cycleCountStart() must be called prior to getting another cycle count value, 
                since cycleCountStop() disables the timers.

Module "Cpu"       (bean 56F8367)
   - Cpu_EnableInt -Enables all maskable interrupts
   - Cpu_DisableInt -Disables all maskable interrupts
   - Cpu_SetWaitMode -Sets low power mode - Wait mode.  For more information about the wait mode see this CPU documentation.  
                Release from wait mode: Reset or interrupt
   - Cpu_SetStopMode -Sets low power mode - Stop mode.  For more information about the stop mode see this CPU documentation.
   - Cpu_SetDataMode -Sets the Data memory map to use either internal & external resources or external resources only.

===================================================================================
